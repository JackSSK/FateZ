{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# FateZ Multiomic Pertubation Effect Prediction(?)\n",
    "This notebook demonstrate how to implement Pertubation Effect Prediction method with FateZ's modules."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Done import\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import sys\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "from torch.utils.data import DataLoader\n",
    "import pandas as pd\n",
    "import fatez.lib as lib\n",
    "import fatez.test as test\n",
    "import fatez.model as model\n",
    "import fatez.tool.JSON as JSON\n",
    "import fatez.process as process\n",
    "import fatez.process.fine_tuner as fine_tuner\n",
    "import fatez.process.pre_trainer as pre_trainer\n",
    "from pkg_resources import resource_filename\n",
    "\n",
    "suppressor = process.Quiet_Mode()\n",
    "print('Done import')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Build model and make some fake data first."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Done Fake Data\n"
     ]
    }
   ],
   "source": [
    "# Parameters\n",
    "params = {\n",
    "    'n_sample': 10,       # Fake samples to make\n",
    "    'batch_size': 2,      # Batch size\n",
    "}\n",
    "\n",
    "# Load built-in config file\n",
    "config = JSON.decode(resource_filename(\n",
    "        __name__, '../../fatez/data/config/gat_bert_config.json'\n",
    "    )\n",
    ")\n",
    "\n",
    "device = 'cuda'\n",
    "dtype = torch.float32\n",
    "\n",
    "# Generate Fake data\n",
    "faker = test.Faker(model_config = config, **params)\n",
    "pertubation_dataloader = faker.make_data_loader()\n",
    "result_dataloader = faker.make_data_loader()\n",
    "\n",
    "# Make id of pertubation result the 'label' of each sample\n",
    "for i,k in enumerate(pertubation_dataloader.dataset.samples):\n",
    "    k.y = i\n",
    "    \n",
    "print('Done Fake Data')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The model will be architecturally similar with a pretrainer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Set\n"
     ]
    }
   ],
   "source": [
    "worker = pre_trainer.Set(config, dtype = dtype)\n",
    "\n",
    "print('Model Set')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### However, the training part will be littel bit different\n",
    "This part is modified based on pre_trainer.Trainer.train()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Loss\n",
      "0  2.730115\n"
     ]
    }
   ],
   "source": [
    "report_batch = False\n",
    "size = worker.input_sizes\n",
    "\n",
    "net, device = worker.use_device(device)\n",
    "net.train(True)\n",
    "best_loss = 99\n",
    "loss_all = 0\n",
    "report = list()\n",
    "\n",
    "for x,y in pertubation_dataloader:\n",
    "    \n",
    "    # Prepare input data as always\n",
    "    input = [ele.to(device) for ele in x]\n",
    "    \n",
    "    # Mute some debug outputs\n",
    "    suppressor.on()\n",
    "    node_rec, adj_rec = net(input)\n",
    "    suppressor.off()\n",
    "    \n",
    "    # Prepare pertubation result data using a seperate dataloader\n",
    "    y = [result_dataloader.dataset.samples[ele].to(device) for ele in y]\n",
    "    # Please be noted here that this script is only reconstructing TF parts\n",
    "    # To reconstruct whole genome, we can certainly add an additionaly layer which takes adj_rec and node_rec to do the job.\n",
    "    node_results = torch.split(\n",
    "        torch.stack([ele.x for ele in y], 0),\n",
    "        node_rec.shape[1],\n",
    "        dim = 1\n",
    "    )[0]\n",
    "    adj_results = lib.get_dense_adjs(\n",
    "        y, (size['n_reg'],size['n_node'],size['edge_attr'])\n",
    "    )\n",
    "    \n",
    "    # Get total loss\n",
    "    loss = worker.criterion(node_rec, node_results)\n",
    "    if adj_rec is not None:\n",
    "        loss += worker.criterion(adj_rec, adj_results)\n",
    "    \n",
    "    # Some backward stuffs here\n",
    "    loss.backward()\n",
    "    nn.utils.clip_grad_norm_(worker.model.parameters(), worker.max_norm)\n",
    "    worker.optimizer.step()\n",
    "    worker.optimizer.zero_grad()\n",
    "\n",
    "    # Accumulate\n",
    "    best_loss = min(best_loss, loss.item())\n",
    "    loss_all += loss.item()\n",
    "\n",
    "    # Some logs\n",
    "    if report_batch: report.append([loss.item()])\n",
    "\n",
    "\n",
    "worker.scheduler.step()\n",
    "report.append([loss_all / len(pertubation_dataloader)])\n",
    "report = pd.DataFrame(report)\n",
    "report.columns = ['Loss', ]\n",
    "print(report)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### In the case of tuning unlabeled data, which does not have pertubation results... \n",
    "We shall set another trainer using previous model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Loss\n",
      "0  2.118923\n"
     ]
    }
   ],
   "source": [
    "tuner = pre_trainer.Set(config, prev_model = worker.model, dtype = dtype)\n",
    "\n",
    "# Some new fake data\n",
    "tuner_dataloader = faker.make_data_loader()\n",
    "\n",
    "# And the tuning process is also based on input reconstruction as pretraining\n",
    "suppressor.on()\n",
    "report = tuner.train(tuner_dataloader, report_batch = False, device = device)\n",
    "suppressor.off()\n",
    "print(report)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Then we shall just use worker object to make predictions.\n",
    "Similar with the training block above for worker, but no need to prepare y."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[[-0.1218, -0.0319],\n",
      "         [ 0.2913, -0.8462],\n",
      "         [ 0.1863, -0.7708],\n",
      "         [-0.0997, -0.1563]],\n",
      "\n",
      "        [[-0.1467,  0.0468],\n",
      "         [ 0.5391, -0.9599],\n",
      "         [ 0.2706, -0.8496],\n",
      "         [-0.1051, -0.0997]]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[[ 0.9759,  0.7606, -0.4116,  0.1393, -0.1631,  0.3622, -0.4710,\n",
      "           0.3269, -0.7119,  1.0409],\n",
      "         [ 0.6905,  0.9797,  0.8428, -0.2868,  0.7114,  0.6660, -0.4230,\n",
      "           1.2142, -0.2275,  1.2271],\n",
      "         [ 0.6833,  0.9137,  0.8117, -0.2809,  0.6595,  0.6044, -0.4215,\n",
      "           1.2556, -0.3990,  1.1928],\n",
      "         [ 0.9935,  0.8441, -0.2341,  0.0878, -0.0140,  0.4077, -0.4854,\n",
      "           0.4835, -0.7113,  1.1195]],\n",
      "\n",
      "        [[ 0.9530,  0.6944, -0.5049,  0.1638, -0.2525,  0.3264, -0.4590,\n",
      "           0.2521, -0.7332,  0.9838],\n",
      "         [ 0.4754,  0.8820,  0.9961, -0.3643,  0.7589,  0.7388, -0.3493,\n",
      "           1.1680,  0.1863,  1.1010],\n",
      "         [ 0.6238,  0.9135,  0.9208, -0.3226,  0.7265,  0.6430, -0.4040,\n",
      "           1.2958, -0.2709,  1.1820],\n",
      "         [ 0.9878,  0.8093, -0.3208,  0.1136, -0.0839,  0.3893, -0.4792,\n",
      "           0.4036, -0.7027,  1.0849]]], device='cuda:0',\n",
      "       grad_fn=<ViewBackward0>)\n",
      "tensor([[[-0.1487,  0.0513],\n",
      "         [ 0.0456, -0.1958],\n",
      "         [ 0.3360, -0.8989],\n",
      "         [ 0.3601, -0.8877]],\n",
      "\n",
      "        [[-0.1212, -0.0307],\n",
      "         [ 0.1160, -0.4204],\n",
      "         [ 0.3801, -0.9280],\n",
      "         [ 0.3390, -0.8809]]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[[ 0.9512,  0.6900, -0.5092,  0.1648, -0.2572,  0.3240, -0.4582,\n",
      "           0.2492, -0.7357,  0.9802],\n",
      "         [ 0.9423,  0.8446, -0.2512,  0.0880, -0.0232,  0.4611, -0.4631,\n",
      "           0.3622, -0.4557,  1.0862],\n",
      "         [ 0.5498,  0.8810,  1.0078, -0.3603,  0.7641,  0.6632, -0.3809,\n",
      "           1.3263, -0.1690,  1.1465],\n",
      "         [ 0.6390,  0.9653,  0.8957, -0.3102,  0.7371,  0.6908, -0.4059,\n",
      "           1.2122, -0.1156,  1.2036]],\n",
      "\n",
      "        [[ 0.9756,  0.7599, -0.4138,  0.1400, -0.1648,  0.3620, -0.4708,\n",
      "           0.3243, -0.7104,  1.0400],\n",
      "         [ 0.9235,  0.9534,  0.0836, -0.0172,  0.2345,  0.5428, -0.4713,\n",
      "           0.6325, -0.4001,  1.1870],\n",
      "         [ 0.5049,  0.8616,  1.0555, -0.3815,  0.7841,  0.6768, -0.3664,\n",
      "           1.3370, -0.0988,  1.1240],\n",
      "         [ 0.6477,  0.9659,  0.8952, -0.3091,  0.7370,  0.6831, -0.4095,\n",
      "           1.2271, -0.1522,  1.2088]]], device='cuda:0',\n",
      "       grad_fn=<ViewBackward0>)\n",
      "tensor([[[ 0.0884, -0.6576],\n",
      "         [ 0.4476, -0.9476],\n",
      "         [-0.1846, -0.0253],\n",
      "         [-0.1274, -0.1398]],\n",
      "\n",
      "        [[ 0.1387, -0.7131],\n",
      "         [ 0.4774, -0.9635],\n",
      "         [-0.1421, -0.1764],\n",
      "         [-0.1231, -0.1000]]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[[ 0.8147,  0.9625,  0.5978, -0.1951,  0.5523,  0.5688, -0.4593,\n",
      "           1.1320, -0.5370,  1.2397],\n",
      "         [ 0.5384,  0.9173,  1.0032, -0.3581,  0.7798,  0.7158, -0.3740,\n",
      "           1.2443,  0.0226,  1.1517],\n",
      "         [ 0.9220,  0.6931, -0.3247,  0.1020, -0.1435,  0.3236, -0.4580,\n",
      "           0.4472, -0.8300,  1.0048],\n",
      "         [ 0.9875,  0.8244, -0.2333,  0.0859, -0.0233,  0.3913, -0.4840,\n",
      "           0.5027, -0.7579,  1.1093]],\n",
      "\n",
      "        [[ 0.7935,  0.9802,  0.6656, -0.2184,  0.6026,  0.5975, -0.4540,\n",
      "           1.1602, -0.4627,  1.2484],\n",
      "         [ 0.5047,  0.8991,  1.0318, -0.3719,  0.7886,  0.7232, -0.3629,\n",
      "           1.2476,  0.0712,  1.1320],\n",
      "         [ 0.9695,  0.8225, -0.1439,  0.0549,  0.0302,  0.3911, -0.4824,\n",
      "           0.5963, -0.7986,  1.1177],\n",
      "         [ 0.9870,  0.8049, -0.3040,  0.1078, -0.0759,  0.3823, -0.4802,\n",
      "           0.4320, -0.7366,  1.0866]]], device='cuda:0',\n",
      "       grad_fn=<ViewBackward0>)\n",
      "tensor([[[ 0.1636, -0.7411],\n",
      "         [-0.0422, -0.1777],\n",
      "         [-0.1802, -0.0324],\n",
      "         [ 0.2489, -0.8250]],\n",
      "\n",
      "        [[ 0.1883, -0.7675],\n",
      "         [-0.0207, -0.1558],\n",
      "         [-0.1741, -0.0804],\n",
      "         [ 0.2452, -0.8210]]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[[ 0.7722,  0.9789,  0.7088, -0.2348,  0.6285,  0.6092, -0.4481,\n",
      "           1.1822, -0.4267,  1.2450],\n",
      "         [ 0.9848,  0.8582, -0.2405,  0.0897, -0.0106,  0.4332, -0.4806,\n",
      "           0.4371, -0.6114,  1.1181],\n",
      "         [ 0.9357,  0.7106, -0.3277,  0.1053, -0.1368,  0.3304, -0.4625,\n",
      "           0.4428, -0.8233,  1.0183],\n",
      "         [ 0.6962,  0.9659,  0.8390, -0.2857,  0.7021,  0.6457, -0.4259,\n",
      "           1.2402, -0.2994,  1.2247]],\n",
      "\n",
      "        [[ 0.7499,  0.9759,  0.7503, -0.2507,  0.6524,  0.6203, -0.4417,\n",
      "           1.2025, -0.3905,  1.2401],\n",
      "         [ 0.9721,  0.8395, -0.2860,  0.1021, -0.0473,  0.4325, -0.4734,\n",
      "           0.3775, -0.5646,  1.0941],\n",
      "         [ 0.9385,  0.7384, -0.2538,  0.0830, -0.0781,  0.3460, -0.4669,\n",
      "           0.5096, -0.8279,  1.0459],\n",
      "         [ 0.7020,  0.9686,  0.8306, -0.2822,  0.6983,  0.6446, -0.4276,\n",
      "           1.2354, -0.3047,  1.2272]]], device='cuda:0',\n",
      "       grad_fn=<ViewBackward0>)\n",
      "tensor([[[-0.1183, -0.1285],\n",
      "         [ 0.0047, -0.1917],\n",
      "         [ 0.3009, -0.8719],\n",
      "         [ 0.3402, -0.8726]],\n",
      "\n",
      "        [[-0.1421, -0.0295],\n",
      "         [ 0.0264, -0.2799],\n",
      "         [ 0.3119, -0.8748],\n",
      "         [ 0.4526, -0.9534]]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[[ 0.9900,  0.8230, -0.2624,  0.0955, -0.0416,  0.3924, -0.4832,\n",
      "           0.4688, -0.7369,  1.1039],\n",
      "         [ 0.9658,  0.8567, -0.2419,  0.0880, -0.0118,  0.4502, -0.4728,\n",
      "           0.4017, -0.5295,  1.1062],\n",
      "         [ 0.5750,  0.8843,  0.9719, -0.3458,  0.7436,  0.6487, -0.3888,\n",
      "           1.3188, -0.2243,  1.1545],\n",
      "         [ 0.6600,  0.9738,  0.8701, -0.2992,  0.7255,  0.6843, -0.4125,\n",
      "           1.2036, -0.1466,  1.2133]],\n",
      "\n",
      "        [[ 0.9730,  0.7525, -0.3957,  0.1334, -0.1575,  0.3531, -0.4713,\n",
      "           0.3557, -0.7493,  1.0399],\n",
      "         [ 0.9664,  0.9058, -0.1117,  0.0483,  0.0916,  0.4819, -0.4789,\n",
      "           0.5115, -0.5184,  1.1524],\n",
      "         [ 0.5385,  0.8532,  0.9970, -0.3594,  0.7438,  0.6449, -0.3770,\n",
      "           1.3313, -0.2067,  1.1278],\n",
      "         [ 0.5272,  0.9105,  1.0178, -0.3644,  0.7855,  0.7166, -0.3706,\n",
      "           1.2537,  0.0294,  1.1460]]], device='cuda:0',\n",
      "       grad_fn=<ViewBackward0>)\n"
     ]
    }
   ],
   "source": [
    "net, device = worker.use_device(device)\n",
    "net.train(True)\n",
    "\n",
    "for x,_ in tuner_dataloader:\n",
    "    \n",
    "    # Prepare input data as always\n",
    "    input = [ele.to(device) for ele in x]\n",
    "    \n",
    "    # Mute some debug outputs\n",
    "    suppressor.on()\n",
    "    node_rec, adj_rec = net(input)\n",
    "    suppressor.off()\n",
    "    print(node_rec, adj_rec)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
